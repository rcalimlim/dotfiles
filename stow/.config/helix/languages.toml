[[language]]
name = "bash"
language-servers = ["bash-language-server"]
formatter = { command = "shfmt", args = ["-ws", "--apply-ignore"] }
auto-format = true

[[language]]
name = "javascript"
language-servers = ["typescript-language-server"]
formatter = { command = "prettier", args = ["--parser", "javascript"] }
auto-format = true

[[language]]
name = "json"
language-servers = ["vscode-json-language-server"]
formatter = { command = "prettier", args = ["--parser", "json"] }
auto-format = true

[[language]]
name = "lua"
auto-format = true

[[language]]
name = "typescript"
language-servers = [
  { name = "typescript-language-server", except-features = [
    "format",
  ] },
  "eslint",
]
formatter = { command = "prettier", args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "python"
language-servers = ["pylsp"]
roots = [".git"]
workspace-lsp-roots = ["src/updater"]
auto-format = true

[language-server.pylsp.config.pylsp.plugins]
flake8 = { enabled = false }
autopep8 = { enabled = false }
mccabe = { enabled = false }
pycodestyle = { enabled = false }
pyflakes = { enabled = true }
pylint = { enabled = true }
yapf = { enabled = false }
# ruff = { enabled = false, ignore = ["F401"], lineLength = 120 }

[[language]]
name = "toml"
language-servers = ["taplo"]
formatter = { command = "taplo", args = ["fmt", "-"] }
auto-format = true

[[language]]
name = "vue"
auto-format = true
file-types = ["vue"]
formatter = { command = 'prettier', args = ["--parser", "vue"] }

#------------------------------------------------------------------------------
# lsp config: eslint
#------------------------------------------------------------------------------
[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.eslint.config]
format = true
nodePath = ""
onIgnoredFiles = "off"
quiet = false
rulesCustomizations = []
run = "onType"
useESLintClass = false
validate = "on"
codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = true } }
codeActionOnSave = { mode = "all" }
experimental = {}
problems = { shortenToSingleLine = false }
workingDirectory = { mode = "auto" }

#------------------------------------------------------------------------------
# lsp config: graphql
#------------------------------------------------------------------------------
[language-server.graphql]
command = "graphql-lsp"
args = ["server", "-m", "stream"]
formatter = { command = "prettier", args = ["--parser", "json"] }
auto-format = true

#------------------------------------------------------------------------------
# lsp config: rust-analyzer
#------------------------------------------------------------------------------
[language-server.rust-analyzer.config]
check = { command = "clippy", features = "all" }
diagnostics = { experimental = { enable = true } }
hover = { actions = { enable = true } }
typing = { autoClosingAngleBrackets = { enable = true } }
cargo = { allFeatures = true }
procMacro = { enable = true }


#------------------------------------------------------------------------------
# lsp config: taplo
#------------------------------------------------------------------------------
[language-server.taplo]
command = "taplo"
args = ["lsp", "stdio"]

#------------------------------------------------------------------------------
# lsp config: typescript-language-server
#------------------------------------------------------------------------------
[language-server.typescript-language-server.config]
documentFormatting = false
hostInfo = "helix"

[language-server.typescript-language-server.config.completions]
completeFunctionCalls = false # possibly disable to avoid double (())-ing

[language-server.typescript-language-server.config.typescript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = true
includeInlayFunctionParameterTypeHints = true
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = true
includeInlayPropertyDeclarationTypeHints = true
includeInlayVariableTypeHints = true

#------------------------------------------------------------------------------
# lsp config: vscode-json-language-server
#------------------------------------------------------------------------------
[language-server.vscode-json-language-server.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true
